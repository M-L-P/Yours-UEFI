###############################################################################
#								[macOS.conf]
#			Configuration file for setting something about macOS
###############################################################################

enable_and_lock_vmx false

#####			----{set whether to lock the MSR or not}----
#------------------------------------------------------------------------------
# Enable VMX bit and lock the CPU MSR if unlocked.
# On some Intel Apple computers, the firmware does not lock the MSR 0x3A.
# The symptom on Windows is Hyper-V not working even if the CPU
# meets the minimum requirements (HW assisted virtualization and SLAT)
# DO NOT SET THIS EXCEPT ON INTEL CPUs THAT SUPPORT VMX! See
# http://www.thomas-krenn.com/en/wiki/Activating_the_Intel_VT_Virtualization_Feature
# for more on this subject.
# The default is false: Don't try to enable and lock the MSR.
#------------------------------------------------------------------------------

#spoof_osx_version 10.9

#####					----{set macOS spoofing}----
#------------------------------------------------------------------------------
# Tell a Mac's EFI that macOS is about to be launched, even when it's not.
# This option causes some Macs to initialize their hardware differently than
# when a third-party OS is launched normally. In some cases (particularly on
# Macs with multiple video cards), using this option can cause hardware to
# work that would not otherwise work. On the other hand, using this option
# when it is not necessary can cause hardware (such as keyboards and mice) to
# become inaccessible. Therefore, you should not enable this option if your
# non-Apple OSes work correctly; enable it only if you have problems with
# some hardware devices. When needed, a value of "10.9" usually works, but
# you can experiment with other values. This feature has no effect on
# non-Apple computers.
# The default is inactive (no macOS spoofing is done).
#------------------------------------------------------------------------------

#csr_values 10,877

#####				----{set the CSR values for macOS}----
#------------------------------------------------------------------------------
# Set the CSR values for Apple's System Integrity Protection (SIP) feature.
# Values are two-byte (four-character) hexadecimal numbers. These values
# define which specific security features are enabled. Below are the codes
# for what the values mean. Add them up (in hexadecimal!) to set new values.
# Apple's "csrutil enable" and "csrutil disable" commands set values of 10
# and 877, respectively. (Prior to OS 11, 77 was used rather than 877; 877
# is required for OS 11, and should work for OS X 10.x, too.)
#   CSR_ALLOW_UNTRUSTED_KEXTS            0x0001
#   CSR_ALLOW_UNRESTRICTED_FS            0x0002
#   CSR_ALLOW_TASK_FOR_PID               0x0004
#   CSR_ALLOW_KERNEL_DEBUGGER            0x0008
#   CSR_ALLOW_APPLE_INTERNAL             0x0010
#   CSR_ALLOW_UNRESTRICTED_DTRACE        0x0020
#   CSR_ALLOW_UNRESTRICTED_NVRAM         0x0040
#   CSR_ALLOW_DEVICE_CONFIGURATION       0x0080
#   CSR_ALLOW_ANY_RECOVERY_OS            0x0100
#   CSR_ALLOW_UNAPPROVED_KEXTS           0x0200
#   CSR_ALLOW_EXECUTABLE_POLICY_OVERRIDE 0x0400
#   CSR_ALLOW_UNAUTHENTICATED_ROOT       0x0800
#------------------------------------------------------------------------------

###############################################################################

#####{Example One}
#------------------------------------------------------------------------------
# MacOS is normally detected and run automatically; however,
# if you want to do something unusual, a manual boot stanza may
# be the way to do it. This one does nothing very unusual, but
# it may serve as a starting point. Note that you'll almost
# certainly need to change the "volume" line for this example
# to work.
#menuentry "My macOS" {
#    icon \EFI\refind\icons\os_mac.png
#    volume "macOS boot"
#    loader \System\Library\CoreServices\boot.efi
#    disabled
#}
#------------------------------------------------------------------------------
#####{Example Two}
#------------------------------------------------------------------------------
# The firmware_bootnum token takes a HEXADECIMAL value as an option
# and sets that value using the EFI's BootNext variable and then
# reboots the computer. This then causes a one-time boot of the
# computer using this EFI boot option. It can be used for various
# purposes, but one that's likely to interest some rEFInd users is
# that some Macs with HiDPI displays produce lower-resolution
# desktops when booted through rEFInd than when booted via Apple's
# own boot manager. Booting using the firmware_bootnum option
# produces the better resolution. Note that no loader option is
# used in this type of configuration.
#menuentry "macOS via BootNext" {
#    icon /EFI/refind/icons/os_mac.png
#    firmware_bootnum 80
#    disabled
#}
#------------------------------------------------------------------------------